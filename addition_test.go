package float64x4


import "testing"


func TestAdd(t *testing.T) {

	tests := []struct {
		ax,ay,az,aw float64
		bx,by,bz,bw float64
		cx,cy,cz,cw float64
	}{
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},

		{
			1.0, 1.0, 1.0, 1.0,
			0.0, 0.0, 0.0, 0.0,

			1.0, 1.0, 1.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			1.0, 1.0, 1.0, 1.0,

			1.0, 1.0, 1.0, 1.0,
		},
		{
			1.0, 1.0, 1.0, 1.0,
			1.0, 1.0, 1.0, 1.0,

			2.0, 2.0, 2.0, 2.0,
		},

		{
			0.5, 0.5, 0.5, 0.5,
			0.0, 0.0, 0.0, 0.0,

			0.5, 0.5, 0.5, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.5, 0.5, 0.5, 0.5,

			0.5, 0.5, 0.5, 0.5,
		},
		{
			0.5, 0.5, 0.5, 0.5,
			0.5, 0.5, 0.5, 0.5,

			1.0, 1.0, 1.0, 1.0,
		},

		{
			5.0, 5.0, 5.0, 5.0,
			0.0, 0.0, 0.0, 0.0,

			5.0, 5.0, 5.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			5.0, 5.0, 5.0, 5.0,

			5.0, 5.0, 5.0, 5.0,
		},
		{
			5.0, 5.0, 5.0, 5.0,
			5.0, 5.0, 5.0, 5.0,

			10.0, 10.0, 10.0, 10.0,
		},



		{
			1.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			1.0, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0,

			1.0, 0.0, 0.0, 0.0,
		},
		{
			1.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0,

			2.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 1.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,

			0.0, 1.0, 0.0, 0.0,
		},
		{
			0.0, 1.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,

			0.0, 2.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 1.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,

			0.0, 0.0, 1.0, 0.0,
		},
		{
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 1.0, 0.0,

			0.0, 0.0, 2.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 1.0,

			0.0, 0.0, 0.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 1.0,

			0.0, 0.0, 0.0, 2.0,
		},



		{
			0.5, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.5, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.5, 0.0, 0.0, 0.0,

			0.5, 0.0, 0.0, 0.0,
		},
		{
			0.5, 0.0, 0.0, 0.0,
			0.5, 0.0, 0.0, 0.0,

			1.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.5, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,

			0.0, 0.5, 0.0, 0.0,
		},
		{
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,

			0.0, 1.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.5, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.5, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.5, 0.0,

			0.0, 0.0, 0.5, 0.0,
		},
		{
			0.0, 0.0, 0.5, 0.0,
			0.0, 0.0, 0.5, 0.0,

			0.0, 0.0, 1.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 0.5,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.5,

			0.0, 0.0, 0.0, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.5,
			0.0, 0.0, 0.0, 0.5,

			0.0, 0.0, 0.0, 1.0,
		},



		{
			5.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			5.0, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			5.0, 0.0, 0.0, 0.0,

			5.0, 0.0, 0.0, 0.0,
		},
		{
			5.0, 0.0, 0.0, 0.0,
			5.0, 0.0, 0.0, 0.0,

			10.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 5.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 5.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 5.0, 0.0, 0.0,

			0.0, 5.0, 0.0, 0.0,
		},
		{
			0.0, 5.0, 0.0, 0.0,
			0.0, 5.0, 0.0, 0.0,

			0.0, 10.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 5.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 5.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 5.0, 0.0,

			0.0, 0.0, 5.0, 0.0,
		},
		{
			0.0, 0.0, 5.0, 0.0,
			0.0, 0.0, 5.0, 0.0,

			0.0, 0.0, 10.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 5.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 5.0,

			0.0, 0.0, 0.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 5.0,
			0.0, 0.0, 0.0, 5.0,

			0.0, 0.0, 0.0, 10.0,
		},




		{
			1.2, 2.3, 3.4, 4.5,
			5.6, 6.7, 7.8, 8.9,

			6.8, 9.0, 11.2, 13.4,
		},
	}


	for _,datum := range tests {

		a := New(datum.ax, datum.ay, datum.az, datum.aw)
		b := New(datum.bx, datum.by, datum.bz, datum.bw)

		c := a.Add(b)

        if datum.cx != c.X {
            t.Errorf("Bad value for X. Expected %v, but instead got %v", datum.cx, c.X)
        }
        if datum.cy != c.Y {
            t.Errorf("Bad value for Y. Expected %v, but instead got %v", datum.cy, c.Y)
        }
        if datum.cz != c.Z {
            t.Errorf("Bad value for Z. Expected %v, but instead got %v", datum.cz, c.Z)
        }
        if datum.cw != c.W {
            t.Errorf("Bad value for W. Expected %v, but instead got %v", datum.cw, c.W)
        }
	}
	
}


func TestAddTo(t *testing.T) {

	tests := []struct {
		ax,ay,az,aw float64
		bx,by,bz,bw float64
		cx,cy,cz,cw float64
	}{
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},

		{
			1.0, 1.0, 1.0, 1.0,
			0.0, 0.0, 0.0, 0.0,

			1.0, 1.0, 1.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			1.0, 1.0, 1.0, 1.0,

			1.0, 1.0, 1.0, 1.0,
		},
		{
			1.0, 1.0, 1.0, 1.0,
			1.0, 1.0, 1.0, 1.0,

			2.0, 2.0, 2.0, 2.0,
		},

		{
			0.5, 0.5, 0.5, 0.5,
			0.0, 0.0, 0.0, 0.0,

			0.5, 0.5, 0.5, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.5, 0.5, 0.5, 0.5,

			0.5, 0.5, 0.5, 0.5,
		},
		{
			0.5, 0.5, 0.5, 0.5,
			0.5, 0.5, 0.5, 0.5,

			1.0, 1.0, 1.0, 1.0,
		},

		{
			5.0, 5.0, 5.0, 5.0,
			0.0, 0.0, 0.0, 0.0,

			5.0, 5.0, 5.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			5.0, 5.0, 5.0, 5.0,

			5.0, 5.0, 5.0, 5.0,
		},
		{
			5.0, 5.0, 5.0, 5.0,
			5.0, 5.0, 5.0, 5.0,

			10.0, 10.0, 10.0, 10.0,
		},



		{
			1.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			1.0, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0,

			1.0, 0.0, 0.0, 0.0,
		},
		{
			1.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0,

			2.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 1.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,

			0.0, 1.0, 0.0, 0.0,
		},
		{
			0.0, 1.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,

			0.0, 2.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 1.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,

			0.0, 0.0, 1.0, 0.0,
		},
		{
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 1.0, 0.0,

			0.0, 0.0, 2.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 1.0,

			0.0, 0.0, 0.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 1.0,

			0.0, 0.0, 0.0, 2.0,
		},



		{
			0.5, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.5, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.5, 0.0, 0.0, 0.0,

			0.5, 0.0, 0.0, 0.0,
		},
		{
			0.5, 0.0, 0.0, 0.0,
			0.5, 0.0, 0.0, 0.0,

			1.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.5, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,

			0.0, 0.5, 0.0, 0.0,
		},
		{
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,

			0.0, 1.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.5, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.5, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.5, 0.0,

			0.0, 0.0, 0.5, 0.0,
		},
		{
			0.0, 0.0, 0.5, 0.0,
			0.0, 0.0, 0.5, 0.0,

			0.0, 0.0, 1.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 0.5,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.5,

			0.0, 0.0, 0.0, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.5,
			0.0, 0.0, 0.0, 0.5,

			0.0, 0.0, 0.0, 1.0,
		},



		{
			5.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			5.0, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			5.0, 0.0, 0.0, 0.0,

			5.0, 0.0, 0.0, 0.0,
		},
		{
			5.0, 0.0, 0.0, 0.0,
			5.0, 0.0, 0.0, 0.0,

			10.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 5.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 5.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 5.0, 0.0, 0.0,

			0.0, 5.0, 0.0, 0.0,
		},
		{
			0.0, 5.0, 0.0, 0.0,
			0.0, 5.0, 0.0, 0.0,

			0.0, 10.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 5.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 5.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 5.0, 0.0,

			0.0, 0.0, 5.0, 0.0,
		},
		{
			0.0, 0.0, 5.0, 0.0,
			0.0, 0.0, 5.0, 0.0,

			0.0, 0.0, 10.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 5.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 5.0,

			0.0, 0.0, 0.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 5.0,
			0.0, 0.0, 0.0, 5.0,

			0.0, 0.0, 0.0, 10.0,
		},




		{
			1.2, 2.3, 3.4, 4.5,
			5.6, 6.7, 7.8, 8.9,

			6.8, 9.0, 11.2, 13.4,
		},
	}


	for _,datum := range tests {

		a := New(datum.ax, datum.ay, datum.az, datum.aw)
		b := New(datum.bx, datum.by, datum.bz, datum.bw)

		a.AddTo(b)

        if datum.cx != a.X {
            t.Errorf("Bad value for X. Expected %v, but instead got %v", datum.cx, a.X)
        }
        if datum.cy != a.Y {
            t.Errorf("Bad value for Y. Expected %v, but instead got %v", datum.cy, a.Y)
        }
        if datum.cz != a.Z {
            t.Errorf("Bad value for Z. Expected %v, but instead got %v", datum.cz, a.Z)
        }
        if datum.cw != a.W {
            t.Errorf("Bad value for W. Expected %v, but instead got %v", datum.cw, a.W)
        }
	}
	
}

