package float64x4


import "math"
import "testing"


func TestSubtract(t *testing.T) {

	tests := []struct {
		ax,ay,az,aw float64
		bx,by,bz,bw float64
		cx,cy,cz,cw float64
	}{
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},

		{
			1.0, 1.0, 1.0, 1.0,
			0.0, 0.0, 0.0, 0.0,

			1.0, 1.0, 1.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			1.0, 1.0, 1.0, 1.0,

			-1.0, -1.0, -1.0, -1.0,
		},
		{
			1.0, 1.0, 1.0, 1.0,
			1.0, 1.0, 1.0, 1.0,

			0.0, 0.0, 0.0, 0.0,
		},

		{
			0.5, 0.5, 0.5, 0.5,
			0.0, 0.0, 0.0, 0.0,

			0.5, 0.5, 0.5, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.5, 0.5, 0.5, 0.5,

			-0.5, -0.5, -0.5, -0.5,
		},
		{
			0.5, 0.5, 0.5, 0.5,
			0.5, 0.5, 0.5, 0.5,

			0.0, 0.0, 0.0, 0.0,
		},

		{
			5.0, 5.0, 5.0, 5.0,
			0.0, 0.0, 0.0, 0.0,

			5.0, 5.0, 5.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			5.0, 5.0, 5.0, 5.0,

			-5.0, -5.0, -5.0, -5.0,
		},
		{
			5.0, 5.0, 5.0, 5.0,
			5.0, 5.0, 5.0, 5.0,

			0.0, 0.0, 0.0, 0.0,
		},



		{
			1.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			1.0, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0,

			-1.0, 0.0, 0.0, 0.0,
		},
		{
			1.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 1.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,

			0.0, -1.0, 0.0, 0.0,
		},
		{
			0.0, 1.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 1.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,

			0.0, 0.0, -1.0, 0.0,
		},
		{
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 1.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 1.0,

			0.0, 0.0, 0.0, -1.0,
		},
		{
			0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 1.0,

			0.0, 0.0, 0.0, 0.0,
		},



		{
			0.5, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.5, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.5, 0.0, 0.0, 0.0,

			-0.5, 0.0, 0.0, 0.0,
		},
		{
			0.5, 0.0, 0.0, 0.0,
			0.5, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.5, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,

			0.0, -0.5, 0.0, 0.0,
		},
		{
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.5, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.5, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.5, 0.0,

			0.0, 0.0, -0.5, 0.0,
		},
		{
			0.0, 0.0, 0.5, 0.0,
			0.0, 0.0, 0.5, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 0.5,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.5,

			0.0, 0.0, 0.0, -0.5,
		},
		{
			0.0, 0.0, 0.0, 0.5,
			0.0, 0.0, 0.0, 0.5,

			0.0, 0.0, 0.0, 0.0,
		},



		{
			5.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			5.0, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			5.0, 0.0, 0.0, 0.0,

			-5.0, 0.0, 0.0, 0.0,
		},
		{
			5.0, 0.0, 0.0, 0.0,
			5.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 5.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 5.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 5.0, 0.0, 0.0,

			0.0, -5.0, 0.0, 0.0,
		},
		{
			0.0, 5.0, 0.0, 0.0,
			0.0, 5.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 5.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 5.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 5.0, 0.0,

			0.0, 0.0, -5.0, 0.0,
		},
		{
			0.0, 0.0, 5.0, 0.0,
			0.0, 0.0, 5.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 5.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 5.0,

			0.0, 0.0, 0.0, -5.0,
		},
		{
			0.0, 0.0, 0.0, 5.0,
			0.0, 0.0, 0.0, 5.0,

			0.0, 0.0, 0.0, 0.0,
		},




		{
			1.2, 2.3, 3.4, 4.5,
			5.6, 6.7, 7.8, 8.9,

			-4.4, -4.4, -4.4, -4.4,
		},
	}


	for _,datum := range tests {

		a := New(datum.ax, datum.ay, datum.az, datum.aw)
		b := New(datum.bx, datum.by, datum.bz, datum.bw)

		c := a.Subtract(b)

		epsilon := 0.000000000000001

        if datum.cx != c.X() && epsilon < math.Abs(datum.cx - c.X()) {
            t.Errorf("Bad value for X. Expected %v, but instead got %v", datum.cx, c.X)
        }
        if datum.cy != c.Y() && epsilon < math.Abs(datum.cy - c.Y()) {
            t.Errorf("Bad value for Y. Expected %v, but instead got %v", datum.cy, c.Y)
        }
        if datum.cz != c.Z() && epsilon < math.Abs(datum.cz - c.Z()) {
            t.Errorf("Bad value for Z. Expected %v, but instead got %v", datum.cz, c.Z)
        }
        if datum.cw != c.W() && epsilon < math.Abs(datum.cw - c.W()) {
            t.Errorf("Bad value for W. Expected %v, but instead got %v", datum.cw, c.W)
        }
	}
	
}


func TestSubtractFrom(t *testing.T) {

	tests := []struct {
		ax,ay,az,aw float64
		bx,by,bz,bw float64
		cx,cy,cz,cw float64
	}{
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},

		{
			1.0, 1.0, 1.0, 1.0,
			0.0, 0.0, 0.0, 0.0,

			1.0, 1.0, 1.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			1.0, 1.0, 1.0, 1.0,

			-1.0, -1.0, -1.0, -1.0,
		},
		{
			1.0, 1.0, 1.0, 1.0,
			1.0, 1.0, 1.0, 1.0,

			0.0, 0.0, 0.0, 0.0,
		},

		{
			0.5, 0.5, 0.5, 0.5,
			0.0, 0.0, 0.0, 0.0,

			0.5, 0.5, 0.5, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.5, 0.5, 0.5, 0.5,

			-0.5, -0.5, -0.5, -0.5,
		},
		{
			0.5, 0.5, 0.5, 0.5,
			0.5, 0.5, 0.5, 0.5,

			0.0, 0.0, 0.0, 0.0,
		},

		{
			5.0, 5.0, 5.0, 5.0,
			0.0, 0.0, 0.0, 0.0,

			5.0, 5.0, 5.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			5.0, 5.0, 5.0, 5.0,

			-5.0, -5.0, -5.0, -5.0,
		},
		{
			5.0, 5.0, 5.0, 5.0,
			5.0, 5.0, 5.0, 5.0,

			0.0, 0.0, 0.0, 0.0,
		},



		{
			1.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			1.0, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0,

			-1.0, 0.0, 0.0, 0.0,
		},
		{
			1.0, 0.0, 0.0, 0.0,
			1.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 1.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 1.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,

			0.0, -1.0, 0.0, 0.0,
		},
		{
			0.0, 1.0, 0.0, 0.0,
			0.0, 1.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 1.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,

			0.0, 0.0, -1.0, 0.0,
		},
		{
			0.0, 0.0, 1.0, 0.0,
			0.0, 0.0, 1.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 1.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 1.0,

			0.0, 0.0, 0.0, -1.0,
		},
		{
			0.0, 0.0, 0.0, 1.0,
			0.0, 0.0, 0.0, 1.0,

			0.0, 0.0, 0.0, 0.0,
		},



		{
			0.5, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.5, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.5, 0.0, 0.0, 0.0,

			-0.5, 0.0, 0.0, 0.0,
		},
		{
			0.5, 0.0, 0.0, 0.0,
			0.5, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.5, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,

			0.0, -0.5, 0.0, 0.0,
		},
		{
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.5, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.5, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.5, 0.0,

			0.0, 0.0, -0.5, 0.0,
		},
		{
			0.0, 0.0, 0.5, 0.0,
			0.0, 0.0, 0.5, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 0.5,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.5,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.5,

			0.0, 0.0, 0.0, -0.5,
		},
		{
			0.0, 0.0, 0.0, 0.5,
			0.0, 0.0, 0.0, 0.5,

			0.0, 0.0, 0.0, 0.0,
		},



		{
			5.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			5.0, 0.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			5.0, 0.0, 0.0, 0.0,

			-5.0, 0.0, 0.0, 0.0,
		},
		{
			5.0, 0.0, 0.0, 0.0,
			5.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 5.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 5.0, 0.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 5.0, 0.0, 0.0,

			0.0, -5.0, 0.0, 0.0,
		},
		{
			0.0, 5.0, 0.0, 0.0,
			0.0, 5.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 5.0, 0.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 5.0, 0.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 5.0, 0.0,

			0.0, 0.0, -5.0, 0.0,
		},
		{
			0.0, 0.0, 5.0, 0.0,
			0.0, 0.0, 5.0, 0.0,

			0.0, 0.0, 0.0, 0.0,
		},


		{
			0.0, 0.0, 0.0, 5.0,
			0.0, 0.0, 0.0, 0.0,

			0.0, 0.0, 0.0, 5.0,
		},
		{
			0.0, 0.0, 0.0, 0.0,
			0.0, 0.0, 0.0, 5.0,

			0.0, 0.0, 0.0, -5.0,
		},
		{
			0.0, 0.0, 0.0, 5.0,
			0.0, 0.0, 0.0, 5.0,

			0.0, 0.0, 0.0, 0.0,
		},




		{
			1.2, 2.3, 3.4, 4.5,
			5.6, 6.7, 7.8, 8.9,

			-4.4, -4.4, -4.4, -4.4,
		},
	}


	for _,datum := range tests {

		a := New(datum.ax, datum.ay, datum.az, datum.aw)
		b := New(datum.bx, datum.by, datum.bz, datum.bw)

		a.SubtractFrom(b)

		epsilon := 0.000000000000001

        if datum.cx != a.X() && epsilon < math.Abs(datum.cx - a.X()) {
            t.Errorf("Bad value for X. Expected %v, but instead got %v", datum.cx, a.X)
        }
        if datum.cy != a.Y() && epsilon < math.Abs(datum.cy - a.Y()) {
            t.Errorf("Bad value for Y. Expected %v, but instead got %v", datum.cy, a.Y)
        }
        if datum.cz != a.Z() && epsilon < math.Abs(datum.cz - a.Z()) {
            t.Errorf("Bad value for Z. Expected %v, but instead got %v", datum.cz, a.Z)
        }
        if datum.cw != a.W() && epsilon < math.Abs(datum.cw - a.W()) {
            t.Errorf("Bad value for W. Expected %v, but instead got %v", datum.cw, a.W)
        }
	}
	
}

